#BlueJ class context
comment0.target=UndirectedGraph
comment0.text=\r\n\ UndirectedGraph\ class\:\ implementation\ of\ an\ Undirected\ graph\r\n\ (weighted\ or\ unweighted)\ through\ Adjacency\ Lists\:<br>\r\n\ an\ Undirected\ graph\ IS\ A\ Directed\ Graph\ such\ that\ if\ the\ Edge\ (i,\ j)\r\n\ is\ present\ in\ i's\ Adjacency\ List,\ then\ the\ Edge\ (j,\ i)\ should\ also\r\n\ be\ present\ in\ j's\ List.\r\n\r\n\ @version\ December\ 2019\r\n
comment1.params=numV
comment1.target=UndirectedGraph(int)
comment1.text=\r\n\ Creates\ an\ empty\ Undirected\ graph\ with\ nV\ vertices.\r\n\ \r\n\ @param\ numV\ Number\ of\ vertices\ in\ the\ graph\r\n
comment2.params=i\ j
comment2.target=void\ addEdge(int,\ int)
comment2.text=\r\n\ If\ it\ isn't\ in\ the\ graph,\ adds\ the\ edge\ (i,\ j)\ to\ an\ Undirected\r\n\ Unweighted\ graph,\ at\ the\ end\ of\ the\ list\ of\ adjacent\ vertices\ of\ i.\r\n\ It\ also\ adds\ edge\ (j,\ i).\r\n\r\n\ @param\ i\ Source\ vertex\r\n\ @param\ j\ Target\ vertex\r\n
comment3.params=i\ j\ w
comment3.target=void\ addEdge(int,\ int,\ double)
comment3.text=\r\n\ If\ it\ isn't\ in\ the\ graph,\ adds\ the\ edge\ (i,\ j)\ with\ weight\ w\ to\ an\r\n\ Undirected\ Weighted\ graph,\ at\ the\ end\ of\ the\ list\ of\ adjacent\ vertices\ of\ i.\r\n\ It\ also\ adds\ edge\ (j,\ i)\ with\ the\ same\ weight.\r\n\r\n\ @param\ i\ Source\ vertex\r\n\ @param\ j\ Target\ vertex\r\n\ @param\ w\ Weight\ of\ the\ edge\ (i,\ j)\r\n
comment4.params=
comment4.target=int\ fuenteEnMST()
comment4.text=\r\n\ Se\ tiene\ un\ grafo\ no\ dirigido\ con\ informaci\u00F3n\ sobre\ las\ diferentes\ l\u00EDneas\r\n\ entre\ municipios\ de\ una\ red\r\n\ el\u00E9ctrica.\ Se\ desea\ saber\ si\ hay\ alg\u00FAn\ municipio\ en\ la\ red\ de\ distribuci\u00F3n\r\n\ que\ sea\ un\ nodo\ fuente.\ Una\ forma\r\n\ de\ averiguarlo\ ser\u00EDa\ examinar\ si\ hay\ alg\u00FAn\ v\u00E9rtice\ en\ su\ \u00E1rbol\ de\r\n\ recubrimiento\ m\u00EDnimo\ (MST),\ calculado\r\n\ mediante\ kruskal,\ que\ est\u00E9\ conectado\ con\ todos\ los\ dem\u00E1s\ v\u00E9rtices.\r\n\ Para\ ello,\ en\ la\ clase\ Grafo\ (del\ paquete\r\n\ librerias.estructurasDeDatos.grafos),\ implementa\ un\r\n\ m\u00E9todo\ de\ instancia\ de\ nombre\ fuenteEnMST,\ sin\ par\u00E1metros\ y\ que\ devuelva\ un\r\n\ n\u00FAmero\ entero\:\r\n\ \uF0B7\ -2,\ si\ el\ MST\ no\ existe.\r\n\ \uF0B7\ -1,\ si\ el\ MST\ existe,\ pero\ no\ contiene\ ning\u00FAn\ v\u00E9rtice\ fuente.\r\n\ \uF0B7\ El\ n\u00FAmero\ del\ v\u00E9rtice\ fuente,\ en\ cualquier\ otro\ caso.\r\n\ El\ perfil\ del\ m\u00E9todo\ debe\ ser\:\ public\ int\ fuenteEnMST()\r\n\ TEST.\ Para\ comprobar\ su\ funcionamiento,\ descarga\ el\ programa\ TestFuenteMST\ y\r\n\ a\u00F1\u00E1delo\ al\ paquete\r\n\ librerias.estructurasDeDatos.grafos\ de\ tu\ proyecto\ eda.\ La\ salida\ que\ debe\r\n\ generar\ es\:\r\n\ Grafo\ inconexo\:\ -2\r\n\ Sin\ v\u00E9rtice\ fuente\:\ -1\r\n\ V\u00E9rtice\ fuente\:\ 1\r\n\ V\u00E9rtice\ fuente\:\ 5\r\n
comment5.params=
comment5.target=int\ verticeMayorGrado()
comment5.text=\r\n\ En\ un\ grafo\ no\ dirigido,\ el\ grado\ de\ un\ v\u00E9rtice\ se\ define\ como\ el\ n\u00FAmero\ de\r\n\ aristas\ que\ inciden\ en\ \u00E9l.\r\n\ En\ la\ clase\ Grafo,\ se\ quiere\ completar\ la\ implementaci\u00F3n\ del\ siguiente\ m\u00E9todo\r\n\ de\ instancia\:\r\n\ precondici\u00F3n\:\ this\ es\ un\ grafo\ no\ dirigido\ conexo\r\n\ public\ int\ verticeMayorGrado()\ {\r\n\ //\ A\ COMPLETAR\r\n\ }\r\n\ Para\ que\ el\ m\u00E9todo\ verticeMayorGrado\ devuelva\ el\ v\u00E9rtice\ de\ mayor\ grado\ en\ el\r\n\ \u00E1rbol\ de\ recubrimiento\r\n\ m\u00EDnimo\ (MST)\ calculado\ mediante\ kruskal\ para\ dicho\ grafo.\ Si\ hay\ m\u00E1s\ de\ un\r\n\ v\u00E9rtice\ con\ el\ mayor\ grado\r\n\ el\ m\u00E9todo\ debe\ devolver\ cualquiera\ de\ ellos.\r\n
numComments=6
